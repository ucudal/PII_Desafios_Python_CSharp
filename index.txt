{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "46dfb674",
   "metadata": {},
   "source": [
    "# Desafíos de programación en C# para desarrolladores Python\n",
    "\n",
    "A continuación verás varios ejemplos de código en Python y, debajo, un espacio\n",
    "para escrbir el código equivalente en C#. Para ejecutar el código que has\n",
    "escrito, oprime `Ctrl+Enter` tanto en Mac como en Windows.\n",
    "\n",
    "Los dos primeros ejemplos te lo damos resueltos, completa tú los demás."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85d31534",
   "metadata": {},
   "source": [
    "### Desafío 1\n",
    "\n",
    "El siguiente código Python imprime `Hello World!` en la consola:\n",
    "\n",
    "```python\n",
    "print(\"Hello World!\")\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Busca en la [Ayuda de C#\n",
    "para programadores Python](https://github.com/ucudal/PII_Ayuda_Csharp_Python) el\n",
    "equivalente al `print()` de Python.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [],
   "source": [
    "Console.WriteLine(\"Hello World!\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3eb0732a",
   "metadata": {},
   "source": [
    "### Desafío 2\n",
    "\n",
    "El siguiente código Python asigna una cadena de texto a una variable llamada\n",
    "`text`; luego imprime el contenido de esa variable `text` en la consola:\n",
    "\n",
    "```python\n",
    "text = \"Esto es un texto\"\n",
    "print(text)\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Ten en cuenta que en C# vas\n",
    "a tener que declarar el tipo de la variable `text`, que será `string`.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [],
   "source": [
    "string text = \"Esto es un texto\";\n",
    "Console.WriteLine(text);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99d26923",
   "metadata": {},
   "source": [
    "### Desafío X\n",
    "\n",
    "El siguiente código Python asigna un valor a una variable llamada `on`\n",
    "que represente el estado de un dispositivo que puede estar encendido o no; luego\n",
    "imprime el valor de esa variable `on` en la consola:\n",
    "\n",
    "```python\n",
    "on = True\n",
    "print(\"Encendido: \", on)\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Ten en cuenta que:\n",
    "\n",
    "* En C# vas a tener que declarar el tipo de la variable `on`, que será `bool`.\n",
    "* El valor `True` en Python es `true` en C# y el de `False` es `false`.\n",
    "* `Console.WriteLine()` en C# no permite múltiples argumentos separados por\n",
    "  comas, a diferencia de `print()` en Python; vas a tener que usar `\"Encendido:\n",
    "  \" + on` para lograr que se imprima en la consola lo mismo que en Python.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Encendido: True\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5ba6cd01",
   "metadata": {},
   "source": [
    "### Desafío X\n",
    "\n",
    "El siguiente código Python asigna un valor a una variable llamada `pi` con el\n",
    "texto `\"3.1416\"` y luego imprime ese valor convertido en un número en punto\n",
    "flotante en la consola:\n",
    "\n",
    "```python\n",
    "pi = \"3.1416\"\n",
    "print(float(pi))\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Ten en cuenta que en C# vas\n",
    "a tener que declarar el tipo de la variable `pi`, que será `string`. Busca en la\n",
    "[Ayuda de C# para programadores\n",
    "Python](https://github.com/ucudal/PII_Ayuda_Csharp_Python) el equivalente al\n",
    "`float()` de Python.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.1416\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "source": [
    "### Desafío X\n",
    "\n",
    "El siguiente código Python asigna un entero a una variable llamada `number` y\n",
    "luego imprime un mensaje dependiendo de que el valor de esa variable sea\n",
    "positivo o negativo.\n",
    "\n",
    "```python\n",
    "number = -5\n",
    "if number > 0:\n",
    "    print(\"El número es positivo\")\n",
    "else:\n",
    "    print(\"El número es negativo\")\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Ten en cuenta que en C# vas\n",
    "a tener que declarar el tipo de la variable `number`, que será `int`.\n",
    "\n",
    "Prueba con diferentes valores para `number` y observa cómo cambia el mensaje\n",
    "impreso.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "source": [
    "### Desafío X\n",
    "\n",
    "El siguiente código Python asigna un entero a una variable llamada `number` y\n",
    "luego imprime un mensaje dependiendo de que el valor de esa variable sea\n",
    "positivo, negativo, o cero.\n",
    "\n",
    "```python\n",
    "number = -5\n",
    "if number > 0:\n",
    "    print(\"El número es positivo\")\n",
    "elif number < 0:\n",
    "    print(\"El número es negativo\")\n",
    "else:\n",
    "    print(\"El número es cero\")\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Busca en la [Ayuda de C#\n",
    "para programadores Python](https://github.com/ucudal/PII_Ayuda_Csharp_Python) el\n",
    "equivalente al `if-else-elif` de Python.\n",
    "\n",
    "Prueba con diferentes valores para `number` y observa cómo cambia el mensaje\n",
    "impreso.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "ee516b0e",
   "metadata": {},
   "source": [
    "### Desafío X\n",
    "\n",
    "El código Python a continuación permite imprimir en la consola una cadena de\n",
    "caracteres embebiendo expresiones, en particular, variables. La cadena `\"Hola,\n",
    "me llamo Juan y tengo 30 años\"` se obtiene como resultado de asignar `nombre =\n",
    "\"Juan\"` y `edad = 30` y luego usar la\n",
    "[f-string](https://peps.python.org/pep-0498/) `f\"Hola, me llamo {nombre} y tengo\n",
    "{edad} años.`.\n",
    "\n",
    "```python\n",
    "nombre = \"Juan\"\n",
    "edad = 30\n",
    "print(f\"Hola, me llamo {nombre} y tengo {edad} años.\")\n",
    "```\n",
    "\n",
    "El equivalente en C# a las *f-strings* de Python se llama [*interpolated\n",
    "strings*](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated).\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "390907c6",
   "metadata": {},
   "source": [
    "### Desafío X\n",
    "\n",
    "El siguiente código Python imprime por consola el valor de la variable de\n",
    "iteración `i` que es sucesivamente uno de los números del 0 al 4.\n",
    "\n",
    "```python\n",
    "for i in range(0, 5):\n",
    "    print(f\"El valor de i es: {i}\")\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Busca en la [Ayuda de C#\n",
    "para programadores Python](https://github.com/ucudal/PII_Ayuda_Csharp_Python) el\n",
    "equivalente al `for i in range()` de Python.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "a6eb5d08",
   "metadata": {},
   "source": [
    "### Desafío X\n",
    "\n",
    "El siguiente código Python asigna una cadena de texto a una variable llamada\n",
    "`text`; luego imprime el primer y el último carácter de esa variable `text` en\n",
    "la consola:\n",
    "\n",
    "```python\n",
    "text = \"Hola mundo\"\n",
    "print(text[0])\n",
    "print(text[-1])\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Ten en cuenta que el índice\n",
    "del último caracter en C# es `text.Length - 1`, porque no puede haber un índice\n",
    "negativo a diferencia de Pyhton. `text.Length` obtiene la cantidad de caracteres\n",
    "de la cadena y `text.Length - 1` es el índice del último porque el índice del\n",
    "primero es `0`.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H\n",
      "o\n"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "e3f25eb2",
   "metadata": {},
   "source": [
    "### Desafío X\n",
    "\n",
    "El siguiente código Python crea una lista llamada `list` con los enteros `1`,\n",
    "`2` y `3`; luego agrega el entero `4`; por último imprime la lista en la consola. \n",
    "\n",
    "```python\n",
    "list = [1, 2, 3]\n",
    "list.append(4)\n",
    "print(list)\n",
    "```\n",
    "\n",
    "Escribe a continuación el código equivalente en C#. Busca en la [Ayuda de C#\n",
    "para programadores Python](https://github.com/ucudal/PII_Ayuda_Csharp_Python)\n",
    "cómo usar una lista e imprimir su contenido en C#.\n",
    "\n",
    "Recuerda oprimir `Ctrl+Enter` para ejecutar el código que has escrito."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "44283016",
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1, 2, 3, 4\n"
     ]
    }
   ],
   "source": [
    "List<int> list = new List<int> { 1, 2, 3 };\n",
    "list.Add(4);\n",
    "Console.WriteLine(string.Join(\", \", list));\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "language_info": {
     "name": "polyglot-notebook"
    },
    "polyglot_notebook": {
     "kernelName": "csharp"
    }
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".NET (C#)",
   "language": "C#",
   "name": ".net-csharp"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "polyglot-notebook",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  },
  "polyglot_notebook": {
   "kernelInfo": {
    "defaultKernelName": "csharp",
    "items": [
     {
      "aliases": [],
      "languageName": "csharp",
      "name": "csharp"
     }
    ]
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
